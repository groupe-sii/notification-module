# Script that generates the `application-consistency-check.properties` file that will
# contain all properties defined by Ogham (such as "${propery.key}").
# Then we can use Spring to automatically check if properties are well-formed or not.
# This is also useful to detect a property defined by Ogham but not known by
# Spring Boot configuration processor (so completion won't be available).
#
# It searches across all files using regular expression and for each
# defined property (except excluded ones), it generates a comment to indicate:
# - where the property is defined
# - where the property is used
import logging
import os
import re

from colored import fore, style

from loader import DefaultValueLoader
from searcher import findPropertiesDefinedInCode, findUsages
from utils import stringify, computeLocationWidth


def displayReport(propertiesInCode):
    warningStyle = fore.YELLOW_1 + style.BOLD
    infoStyle = fore.BLUE + style.BOLD
    keyStyle = style.BOLD
    normalStyle = style.RESET
    keyFormatter = lambda key: keyStyle + key + normalStyle
    
    print(warningStyle + '--------------------------------------------------------------' + normalStyle)
    print(warningStyle + ' Automatically skipped properties defined in code' + normalStyle)
    print(warningStyle + '--------------------------------------------------------------' + normalStyle)
    print(stringify(propertiesInCode.get('automaticallySkipped'), keyFormatter))
    print('\n\n')

    print(infoStyle + '--------------------------------------------------------------' + normalStyle)
    print(infoStyle + ' Manually skipped properties defined in code' + normalStyle)
    print(infoStyle + ' (based on .ignore-props)' + normalStyle)
    print(infoStyle + '--------------------------------------------------------------' + normalStyle)
    print(stringify(propertiesInCode.get('manuallySkipped'), keyFormatter))
    print('\n\n')

    

def writePropertyFile(propertiesInCode, usages, defaultValues, propertyFile):
    locationWidth = computeLocationWidth(propertiesInCode.get('properties'))
    
    header = """#=========================================================================================
                #                                         WARNING
                #=========================================================================================
                # This file is auto-generated using '.tools/properties-consistency/list_all_properties.py' 
                # script.
                #
                # /!\ DO NOT EDIT THIS FILE DIRECTLY /!\ 
                #=========================================================================================
                """
    with open(propertyFile, 'w') as f:
        f.write(re.sub(r'^\s+', '', header, flags=re.MULTILINE)+'\n')
        f.write('# Automatically skipped properties:\n\n')
        for skipped in propertiesInCode.get('automaticallySkipped'):
            f.write('# "${'+skipped+'}"\n')
        f.write('#\n')
        f.write('#\n')
        f.write('# Manually skipped properties:\n\n')
        for skipped in propertiesInCode.get('manuallySkipped'):
            f.write('# "${'+skipped+'}"\n')
        f.write('\n')
        f.write('\n')
        f.write('\n')
        properties = propertiesInCode.get('properties')
        for prop in sorted(properties):
            defaultValue = getDefaultValue(prop, defaultValues)
            f.write('#-------------------\n')
            f.write('# DEFINITIONS\n')
            f.write('#-------------------\n')
            for location in properties.get(prop).locations:
                f.write('# ' + (location.filename + ':' + str(location.linenumber)).ljust(locationWidth) + '            ' + location.line.strip() + '\n')
            f.write('#\n')
            f.write('#-------------------\n')
            f.write('# USAGES\n')
            f.write('#-------------------\n')
            if usages.get(prop) != None:
                for location in usages.get(prop).locations:
                    f.write('# ' + (location.filename + ':' + str(location.linenumber)).ljust(locationWidth) + '            ' + location.line.strip() + '\n')
            f.write(prop+'='+defaultValue+'\n')
            f.write('\n')
        

def getDefaultValue(prop, defaultValues):
    for propWithDefaultValue in defaultValues:
        if prop == propWithDefaultValue.key:
            return propWithDefaultValue.defaultValue
    return '0'


def main():
    # script configuration
    logging.basicConfig(level=logging.INFO)
    scriptDir = os.path.dirname(os.path.realpath(__file__))+'/'
    searchRoot = scriptDir+'../../'
    propertyFile = searchRoot+'/ogham-spring-boot-autoconfigure/src/test/resources/config/application-consistency-check.properties'
    defaultValues = DefaultValueLoader(scriptDir+'.default-values').load()
    # 1) Find all lines containing possible property (with associated file and line number)
    #    that are defined in the code.
    #    Property definition are of the form: "${ogham.property-key}"
    propertiesInCode = findPropertiesDefinedInCode(scriptDir, searchRoot)
    # 2) For each property, find usages in code
    usages = findUsages(propertiesInCode.get('properties'), scriptDir, searchRoot)
    # 3) Display a report to warn about skipped properties
    displayReport(propertiesInCode)
    # 4) Write each property key in application-consistency-check.properties.
    #    Each property has a default value
    writePropertyFile(propertiesInCode, usages, defaultValues, propertyFile)
    

if __name__ == "__main__":
    main()
    