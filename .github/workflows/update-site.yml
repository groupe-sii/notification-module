name: Update site

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version'
        required: true
        default: '2.0.0'
      next-dev-version:
        description: 'Next dev version'
        required: true
        default: '3.0.0-SNAPSHOT'
      output-dir:
        description: 'Directory for the version'
        required: true
        default: 'v3.0.0-SNAPSHOT'
        
jobs:
  mutation-tests:
    runs-on: ubuntu-18.04
    strategy:
      matrix: 
        module:
          - ogham-test-utils
          - ogham-core
          - ogham-template-thymeleaf-common
          - ogham-template-thymeleaf-v2
          - ogham-template-thymeleaf-v3
          - ogham-template-freemarker
          - ogham-email-javamail
          - ogham-email-sendgrid-v2
          - ogham-email-sendgrid-v4
          - ogham-sms-cloudhopper
          - ogham-sms-ovh
          - ogham-sms-smsglobal
          - ogham-all
          - ogham-spring-boot-v1-autoconfigure
          - ogham-spring-boot-v2-autoconfigure
    name: "Mutation testing [${{ matrix.module }}]"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-${{ secrets.CACHE_VERSION }}
      - name: Cache Pitest history
        uses: actions/cache@v2
        with:
          path: /tmp/*_pitest_history.bin
          key: ${{ runner.os }}-pitest-${{ matrix.module }}-${{ secrets.PITEST_CACHE_VERSION }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-pitest-${{ matrix.module }}-${{ secrets.PITEST_CACHE_VERSION }}
      - name: "Build custom Pitest version"
        run: ci/./build-pitest.sh
      - name: "Run mutation tests"
        run: ci/./run-single-module-mutation-tests.sh ${{ matrix.module }} gregor
      - name: "Save Pitest reports - archive"
        run: tar -czf /tmp/pit-reports-${{ matrix.module }}.tar.gz ${{ matrix.module }}/target/pit-reports
      - name: "Save Pitest reports - upload"
        uses: actions/upload-artifact@v2
        with:
          name: pit-reports-${{ matrix.module }}
          path: /tmp/pit-reports-${{ matrix.module }}.tar.gz
        
  generate-documentation:
    needs: [mutation-tests]
    runs-on: ubuntu-18.04
    name: "Generate documentation and site"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-${{ secrets.CACHE_VERSION }}
      - name: "Build custom Pitest version"
        run: ci/./build-pitest.sh
      - name: "Restore Pitest reports generated by each module - download"
        uses: actions/download-artifact@v2
        with:
          path: /tmp
      - name: "Restore Pitest reports generated by each module - extract"
        run: for file in `find /tmp -name 'pit-reports-*.tar.gz' -type f`; do tar -xzf "$file"; done
      - name: "Generate reports and documentation"
#        uses: nick-invision/retry@v2
#        with:
#          timeout_minutes: 120
#          max_attempts: 3
#          command: |
        run: |
            export JAVA_TOOL_OPTIONS='-Xmx4096m'
            export MAVEN_OPTS='-Xmx4096m'
            ci/./generate-documentation.sh
      - name: "Generate showcase video"
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: ci/./generate-showcase-video.sh
      - name: "Save all generated files - archive"
        run: tar -czf /tmp/maven-build.tar.gz target */target 
      - name: "Save all generated files - upload"
        uses: actions/upload-artifact@v2
        with:
          name: maven-build
          path: /tmp/maven-build.tar.gz
        
  update-site:
    needs: [generate-documentation]
    environment: dev
    runs-on: ubuntu-18.04
    name: "Update site"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-${{ secrets.CACHE_VERSION }}
      - name: "Restore generated documentation - download"
        uses: actions/download-artifact@v2
        with:
          name: maven-build
          path: /tmp
      - name: "Restore generated documentation - extract"
        run: |
          tar -xzf /tmp/maven-build.tar.gz
      - name: "Clone gh-pages"
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages
      - name: "Generate site in gh-pages"
        run:
          ./mvnw site:stage
              '-Pmutation-testing'
              '-Dsite.staging.dir=gh-pages'
              '-Dsite.output.version-dir=${{ github.event.inputs.output-dir }}'
              '-DdocLatestReleaseVersion=${{ github.event.inputs.release-version }}'
              '-DdocFutureDevVersion=${{ github.event.inputs.next-dev-version }}'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.5
      - name: "Update list of versions"
        run: |
          python ci/site/generate-site-index-and-versions.py 'gh-pages'
      - name: "Push site on gh-pages"
        working-directory: gh-pages
        run: |
          git config user.email github-actions@github.com
          git config user.name github-actions
          git add .
          git commit -m "doc(site) Add/update ${{ github.event.inputs.output-dir }}"
          git push
                  
  slack-success:
    if: success()
    needs: [update-site]
    runs-on: ubuntu-18.04
    name: "Slack"
    steps:
      - run: echo "BRANCH=${GITHUB_REF#refs/heads}" >> $GITHUB_ENV
      - uses: 8398a7/action-slack@v3
        with:
          text: |
            :white_check_mark: :books: ${{ github.event.inputs.release-version }}
          status: success
          fields: workflow,ref,message
          icon_url: https://github.com/groupe-sii/ogham/raw/master/src/site/resources/img/ogham-blue-256x256.png
          username: 'site'
          author_name: ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  slack-failure:
    if: failure()
    needs: [update-site]
    runs-on: ubuntu-18.04
    name: "Slack"
    steps:
      - run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - uses: 8398a7/action-slack@v3
        with:
          text: |
            :x: :books: ${{ github.event.inputs.release-version }}
          status: failure
          fields: workflow,ref,message
          icon_url: https://github.com/groupe-sii/ogham/raw/master/src/site/resources/img/ogham-blue-256x256.png
          username: 'site'
          author_name: ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

